#!/bin/ruby

#//////////////////////////////////
#//
#// == A reuse distance based GPU cache model
#// This file is part of a cache model for GPUs. The cache model is based on
#// reuse distance theory extended to work with GPUs. The cache model primarly
#// focusses on modelling NVIDIA's Fermi architecture.
#//
#// == More information on the GPU cache model
#// Article............A Detailed GPU Cache Model Based on Reuse Distance Theory
#// Authors............C. Nugteren et al.
#//
#// == Contents of this file
#// This file is a simple Ruby script to parse the output generated by NVIDIA's
#// nvprof profiler. It extracts the profiled L1 hit and miss rates.
#//
#// == File details
#// Filename...........src/profiler/parse_profile.rb
#// Author.............Cedric Nugteren <www.cedricnugteren.nl>
#// Affiliation........Eindhoven University of Technology, The Netherlands
#// Last modified on...30-Oct-2013
#//
#//////////////////////////////////

# Get the command line arguments
profile = ARGV[0]
outdir = ARGV[1]
name = ARGV[2]

# Set the settings
AGGREGATED = false

# Read the input line by line
kernelid = -1
kernels = []
File.read(profile).each_line do |line|
	
	# The profile contains aggregated kernel information
	if AGGREGATED
		
		# Found a new kernel
		if line =~ /Kernel:/
			kernelname = line.split(' ')[1].split('(')[0]
			kernelid += 1
		end
		
		# Found cache miss/hit information
		if line =~ /l1_global_load_/
			kernels[kernelid] = [] if !kernels[kernelid]
			kernels[kernelid].push(line.split(' ')[1])
		end
		
	# The profile does not contain aggregated kernels
	else
		
		# Found cache hit information
		if line =~ /l1_global_load_hit/
			kernelid += 1
			kernels[kernelid] = [] if !kernels[kernelid]
			val = line.split(',').last.split(' ').map{ |c| c.to_i}.inject(:+)
			kernels[kernelid].push((val))
		end
		
		# Found cache miss information
		if line =~ /l1_global_load_miss/
			val = line.split(',').last.split(' ').map{ |c| c.to_i}.inject(:+)
			kernels[kernelid].push((val))
		end
		
	end
end

# Output the found information to a file
kernels.each_with_index do |kernel,kernelid|
	if kernelid < 10
		outfile = File.open("#{outdir}/#{name}_0#{kernelid}.prof","w")
	else
		outfile = File.open("#{outdir}/#{name}_#{kernelid}.prof","w")
	end
	kernel.each do |data|
		outfile.puts data
	end
	outfile.close
end

#//////////////////////////////////